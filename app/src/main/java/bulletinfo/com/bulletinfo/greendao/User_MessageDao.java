package bulletinfo.com.bulletinfo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bulletinfo.com.bulletinfo.bean.User_Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER__MESSAGE".
*/
public class User_MessageDao extends AbstractDao<User_Message, Long> {

    public static final String TABLENAME = "USER__MESSAGE";

    /**
     * Properties of entity User_Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Get_user = new Property(1, String.class, "get_user", false, "GET_USER");
        public final static Property Put_user = new Property(2, String.class, "put_user", false, "PUT_USER");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
    }


    public User_MessageDao(DaoConfig config) {
        super(config);
    }
    
    public User_MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER__MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GET_USER\" TEXT," + // 1: get_user
                "\"PUT_USER\" TEXT," + // 2: put_user
                "\"MESSAGE\" TEXT," + // 3: message
                "\"TIME\" TEXT);"); // 4: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER__MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User_Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String get_user = entity.getGet_user();
        if (get_user != null) {
            stmt.bindString(2, get_user);
        }
 
        String put_user = entity.getPut_user();
        if (put_user != null) {
            stmt.bindString(3, put_user);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User_Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String get_user = entity.getGet_user();
        if (get_user != null) {
            stmt.bindString(2, get_user);
        }
 
        String put_user = entity.getPut_user();
        if (put_user != null) {
            stmt.bindString(3, put_user);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User_Message readEntity(Cursor cursor, int offset) {
        User_Message entity = new User_Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // get_user
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // put_user
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User_Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGet_user(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPut_user(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User_Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User_Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User_Message entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
